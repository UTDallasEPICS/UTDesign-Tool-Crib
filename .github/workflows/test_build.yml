# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Check NextJs build test

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Runs on any open or reopened pull request
  pull_request:
    types: [opened, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AUTH0_BASE_URL: "http://localhost:3000"
  AUTH0_SECRET: "${{secrets.AUTH0_SECRET}}"
  AUTH0_DEFAULT_PASSWORD: "${{ vars.AUTH0_DEFAULT_PASSWORD}}"
  AUTH0_CLIENT_ID: "${{ vars.AUTH0_CLIENT_ID }}"
  AUTH0_CLIENT_SECRET: "${{ secrets.AUTH0_CLIENT_SECRET }}"
  AUTH0_ISSUER_BASE_URL: "${{ vars.AUTH0_ISSUER_BASE_URL }}"
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  MYSQL_DATABASE: ${{ vars.MYSQL_DATABASE }}
  MYSQL_ROOT_HOST: ${{ vars.MYSQL_ROOT_HOST }}
  DATABASE_URL: "mysql://root:${{ secrets.MYSQL_ROOT_PASSWORD }}@localhost:3306/${{ vars.MYSQL_DATABASE }}"

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "::set-output name=manager::yarn"
            echo "::set-output name=command::install"
            echo "::set-output name=runner::yarn"
            exit 0
          elif [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "::set-output name=manager::pnpm"
            echo "::set-output name=command::install"
            echo "::set-output name=runner::pnpx --no-install"
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "::set-output name=manager::npm"
            echo "::set-output name=command::ci"
            echo "::set-output name=runner::npx --no-install"
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi
      - name: Install pnpm
        uses: pnpm/action-setup@v2
          with:
            version: "8"
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Database
        run: docker compose up -d
      - name: Init Prisma
        run: |
          pnpm prisma generate
          pnpm prisma db push
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: npm run build
